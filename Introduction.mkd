
A disjoint set (also called a union-find data structure) is a data structure that keeps track of a partition of a set into disjoint subsets. It's particularly useful for solving problems related to connected components, Kruskal's algorithm for minimum spanning trees, and more.

## Key Operations-
* MakeSet(x): Creates a new set with the element x as its only member. Each element starts as its own parent (representing the root of its set).
* Find(x): Finds the representative (root) of the set containing x. This is used to determine which subset an element belongs to.
* Union(x, y): Merges the subsets containing elements x and y into a single subset.


## Optimizations->

Two common optimizations for improving the performance of the union-find operations:

* Path Compression (for Find):

Flattens the structure of the tree whenever Find is called.
After a Find operation, all elements in the path point directly to the root, reducing future search times.

* Union by Rank (for Union):

Attaches the smaller tree under the root of the larger tree based on rank (an estimate of tree height)

With these optimizations, the time complexity of each operation becomes nearly constant, amortized to O(α(n)), where α(n) is the inverse Ackermann function, which grows very slowly.




### Real-World Applications
* Graph Algorithms:
    Detecting cycles in undirected graphs.
* Finding connected components.
    Minimum spanning tree (e.g., Kruskal's algorithm).
* Dynamic Connectivity Problems:
    Networks, social media, etc.
* Clustering Problems:
    For partitioning data into disjoint groups.



### What does Partition Set mean?

A partition of a set is a way of dividing the elements of a set into non-overlapping and non-empty subsets such that:

* Every element belongs to exactly one subset (no overlap).
* The union of all subsets equals the original set.

**Formal Definition**

If S is a set, a partition of S is a collection of subsets {S₁, S₂, ..., Sₖ} such that:

* S₁ ∪ S₂ ∪ ... ∪ Sₖ = S (the subsets cover the set).
* Sᵢ ∩ Sⱼ = ∅ for i ≠ j (the subsets are disjoint).
* Sᵢ ≠ ∅ for all i (no subset is empty).




# Use of Disjoint Sets in Real-Time Networking

Disjoint sets, also known as Union-Find data structures, find valuable applications in various real-time networking scenarios. Here are a few prominent examples:

**1. Network Topology Management:**

* **Dynamic Network Updates:** In dynamic networks where nodes and connections are constantly changing (e.g., mobile ad-hoc networks, peer-to-peer networks), disjoint sets can efficiently track network connectivity. 
    * Each node can be represented as a separate set initially.
    * When a link is established between two nodes, their respective sets are merged using the Union operation.
    * The Find operation can quickly determine if two nodes belong to the same set (i.e., are connected).

* **Broadcast and Multicast Routing:** Disjoint sets can help identify connected components within the network. This information can be used to optimize broadcast or multicast routing algorithms, ensuring that messages are delivered efficiently to all nodes in the connected component.

**2. Distributed Systems and Peer-to-Peer Networks:**

* **Peer Discovery and Group Management:** In distributed systems and peer-to-peer networks, disjoint sets can be used to efficiently manage groups of peers. 
    * Each peer can be initially represented as a separate set.
    * As peers join or leave groups, the Union and Find operations can be used to dynamically update group membership and identify peers within the same group.

**3. Network Fault Detection and Isolation:**

* **Identifying Network Partitions:** By monitoring link failures and using the Union-Find data structure, network administrators can quickly detect network partitions. 
    * When a link fails, the set representing the affected nodes is split.
    * The Find operation can be used to identify which nodes are isolated from the rest of the network.

**4. Load Balancing and Traffic Engineering:**

* **Dynamic Load Balancing:** Disjoint sets can be used to dynamically balance traffic across different network paths. 
    * By monitoring network congestion levels, nodes can be grouped into sets based on their current load. 
    * Traffic can then be routed preferentially through less congested paths.

**5. Network Security:**

* **Intrusion Detection:** Disjoint sets can be used to detect anomalous network behavior, such as the sudden appearance of unexpected connections between nodes.
    * By monitoring network traffic patterns and using the Union-Find data structure to track connections, deviations from normal behavior can be identified.

**Benefits of Using Disjoint Sets in Networking:**

* **Efficient Connectivity Checks:** The near-constant time complexity of the Union-Find operations (amortized to O(α(n))) makes it highly efficient for checking connectivity in large and dynamic networks.
* **Scalability:** Disjoint sets can efficiently handle large networks with thousands or even millions of nodes.
* **Dynamic Updates:** The data structure can easily accommodate changes in network topology, such as node additions, link failures, and changes in network traffic patterns.

By leveraging the efficient operations of the disjoint set data structure, network protocols and algorithms can be designed to be more scalable, resilient, and responsive to dynamic changes in the network environment.



```cpp
#include <iostream>
#include <vector>

using namespace std;

class DisjointSet{
    public:
        DisjointSet(int n){
            parent = vector<int>(n);
            rank = vector<int>(n, 0);
            for(int i =0; i <n ; i++>){
                parent[i]=i;
            }
        }

        int find(int x){  // path-compressed find function
            if(parent[x] != x){
                parent[x]= find(parent[x]);
            }

            return parent[x];
        }

        void union_sets(int x, int y){
            int rootX = find(x);
            int rootY = find(y);

            if (rootX != rootY){
                if(rank[rootX] > rank[rootY])
                    parent[rootY]= rootX;
                else if(rank[rootX] <  rank[rootY])
                    parent[rootX]= rootY;
                else
                    {parent[rootY] = rootX;
                    rank[rootX]++; }
        }

        int main(){
            int n = 5;
            DisjointSet ds(n);
            ds.union_sets(0, 1);
            ds.union_sets(2, 3);
            ds.union_sets(1, 4); 
            ds.union_sets(0, 3);

            cout << "0 and 4 are in the same set: " << (ds.find(0) == ds.find(4)) << endl; 
            cout << "2 and 4 are in the same set: " << (ds.find(2) == ds.find(4)) << endl; 

            return 0;
        }
}

```


# Why Union by Rank in Disjoint Set Data Structure

In the Disjoint Set data structure, the `union` operation merges two sets. To maintain efficiency, we use a technique called **union by rank**. 

**Key Idea:**

* **Balance:** Union by rank aims to create a balanced tree-like structure among the sets. 
* **Reduced Height:** Balanced trees generally have shorter heights.
* **Faster `find` Operations:** Shorter tree heights lead to faster `find` operations because path compression traverses the tree from a node to its root.

**How it Works:**

1. **Rank:** Each set is assigned a rank. Initially, all sets have a rank of 0.
2. **Union:** When merging two sets:
   * If the ranks of the two sets are different, attach the root of the lower-ranked set to the root of the higher-ranked set. 
   * If the ranks are equal, attach one root to the other and increment the rank of the new root by 1.

**Benefits of Union by Rank:**

* **Improved Performance:** By maintaining a balanced tree structure, union by rank significantly reduces the average time complexity of both `find` and `union` operations.
* **Amortized Analysis:** With union by rank, the amortized time complexity of both `find` and `union` operations is nearly constant, approaching O(α(n)), where α(n) is the inverse Ackermann function, which grows extremely slowly.

**In Summary:**

Union by rank is a crucial optimization technique in the Disjoint Set data structure. By prioritizing the attachment of lower-ranked sets to higher-ranked sets, it helps maintain a balanced tree structure, leading to faster `find` operations and overall improved performance.






