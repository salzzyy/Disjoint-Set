### NUMBER OF PROVINCES.

**Problem:**

Given a graph where cities represent nodes and edges represent direct connections between cities, determine the number of connected components in the graph.

**Approach:**

This problem can be efficiently solved using the Union-Find data structure.

**Algorithm:**

1. **Initialization:**
   - Create an integer variable `n` to store the number of cities.
   - Create an instance of `UnionFind` of size `n`.
   - Initialize an integer variable `numberOfComponents` to `n`, as initially each node represents a separate component.

2. **Iterate through Edges:**
   - Iterate over all possible pairs of cities using nested loops:
     - Outer loop: `i` from 0 to `n-1`
     - Inner loop: `j` from `i+1` to `n-1`
   - For each pair of cities `i` and `j`:
     - If `isConnected[i][j] == 1` (i.e., there's an edge between `i` and `j`):
       - Determine if `i` and `j` belong to different components using the `find` operation:
         - If `find(i) != find(j)`:
           - Perform the `union` operation to merge the components of `i` and `j`.
           - Decrement `numberOfComponents` by 1.

3. **Return Result:**
   - Return `numberOfComponents`.

**Explanation:**

The algorithm iterates through all possible pairs of cities and checks if an edge exists between them. If an edge exists and the cities belong to different components, the `union` operation merges them, and the `numberOfComponents` is decremented. This process continues until all edges have been considered. Finally, the number of remaining connected components is returned.

**Note:**

- This approach leverages the efficiency of the Union-Find data structure, particularly its `find` and `union` operations with path compression and union by rank optimizations.
- The time complexity of this algorithm is typically O(E * α(n)), where E is the number of edges in the graph, and α(n) is the inverse Ackermann function, which grows extremely slowly. 
- This makes the algorithm highly efficient for most practical graph sizes.

```python

class UnionFind:
    def __init__(self, size):
        self.parent = list(range)
        self.rank = [0]* size
    def find(self, x):
        if self.parent[x] !=x:
            self.parent[x]= find(self.parent[x])
    return self.parent[x]

    def union_set(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)

        if self.rank[rootX]> self.rank[rootY]:
            self.parent[rootY]= rootX
        elif self.rank[rootX]< self.rank[rootY]:
            self.parent[rootX]= rootY
        else:
            parent[rootY]= rootX
            self.rank[rootX]+=1
    
class Solution:
    def findCircleNum(self, isConnected):
        n = len(isConnected)
        uf = UnionFind(n)
        numberOfComponents = n

        for i in range(n):
            for j in range(i+1, n):
                if isConnected[i][j] ==1 and uf.find(i) != uf.find(j):
                numberOfComponents -=1
                uf.union_set(i, j)
    return numberOfComponents

#Example Usage:
isConnected = [[1,1,0],[1,1,0],[0,0,1]] 
solution = Solution()
num_cirlces= solution.findCircleNum(isConnected)
print("Number Of Provinces": num_circle)

```


    

    

